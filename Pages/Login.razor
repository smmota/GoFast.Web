@page "/login"

@using GoFast.UI.DTO;
@using GoFast.UI.Services;

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h1>Login</h1>

@if (ShowErrors)
{
    ﻿<div class="error-message btn alert-danger">

    @if (@Errors.Count > 0)
    {
            @foreach (var error in Errors)
        {
            <h3>@error</h3>
        }
    }
</div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Credenciais</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mt-2">
                <label for="email">Email</label>
                <InputText Id="email" Class="form-control" @bind-Value="loginModel.LoginUser" />
                <ValidationMessage For="@(() => loginModel.LoginUser)" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Senha</label>
                <InputText Id="password" type="password" Class="form-control"
                           @bind-Value="loginModel.Senha" />
                <ValidationMessage For="@(() => loginModel.Senha)" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Enviar</button>
        </EditForm>
    </div>
</div>

@code {

    private LoginDTO loginModel = new LoginDTO();
    private bool ShowErrors;
    private List<string> Errors = new List<string>();

    private async Task HandleLogin()
    {
        ShowErrors = false;

        try
        {
            var result = await AuthService.Login(loginModel);
            
            if (result.Token is not null)
            {
                NavigationManager.NavigateTo("/Index");
            }
            else
            {
                Errors.Add(result.Message);
                ShowErrors = true;
            }
        }
        catch (Exception ex)
        {
            Errors.Add("Não foi possível fazer o login : " + ex.Message);
            ShowErrors = true;
        }
    }
}
